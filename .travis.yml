language: c
sudo: true
notifications:
  email: false
before_install:
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get update && wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip && unzip build-wrapper-linux-x86.zip && cp build-wrapper-linux-x86/libinterceptor-x86_64.so build-wrapper-linux-x86/libinterceptor-haswell.so;
    else brew update && wget https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip && unzip build-wrapper-macosx-x86.zip;
    fi;
before_script:
  - ulimit -Sv 500000
after_script:
  - ulimit -Sv unlimited
  - if [ $TRAVIS_OS_NAME = linux ]; then echo " --- Leaks --- " && cat Leaks.log | tail -n 20 | grep -A5 'LEAK SUMMARY' && echo " ---Leaks Full log $(cat Leaks.log | curl -F 'f:1=<-' ix.io)"; fi;
  - bash <(curl -s https://codecov.io/bash) -F unittests
  - sonar-scanner -X
git:
  depth: 1
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-8
      - gcc-7
      - gcc-4.8
      - valgrind
  sonarcloud:
    organization: "jjaniec-github"
    token:
      secure: "LZHnvKlmI0zz1Gj/W/WPnTMhRFmTvYzPYcrx5xyaAr3kWYCYttxmpEFtGDDijppK0Z98+jf7JaBkiMon9hlrZLVbSmiSd1bw4ofJbFdi+q0POn1u+3VG3a6L96vh74yhwoGXtMGpH97ycbVkKwvDT+YXBIXHFJW4iRJBV3dla+5a2Vgte/hWs3pOzB0az+67R3PgLr6WCC0+rI9QJvFujJiT0xdI3KJpuwpzi22eIDA7QtrSAh1ELGxWPFUpNlPMgWo/iMqLa/QzWpip8B5TXELZ30iRpoeq3w+09l0umYBBwzYLF/mZTgdoP8SQ7q/zWAYyh1e/gakFZ6icefHLxsIEgiJi2D8aTvYUccaVQ6cOm0NJmDpYUxdtfDBVUytYNEqPAiN6dPsxDEa3sJPmVWWGpfjvPsoR0inf7d2BXQfMYRI77RIJ4fv7at++66RIIGndyjPDaIyypOWvwYELBfqXbo+gtqmMSFq4OsCtAtp+9OmXdCH1CdBDAdNxK7ST3W8tEqWLQ86Q7Df5rjQJaaDscDM+DMpX688xvOJ3jzz7PRfm4epxm4L6am4bQlLWDO+TAhM37Jo295963G5c8j1V0lgUt6T6wt5KAN4SGC/xtxqUYN6ngk34nBYttWoKMWG8p2VUjQXDpEPqBwJLZ08ciM0Wkgr4apyF7fuBIZc="
matrix:
  fast_finish: true
  include:
    - os: osx
      compiler: gcc
      osx_image: xcode9.4
      env: CXX=gcc
    - os: osx
      compiler: clang
      osx_image: xcode9.4
      env: CXX=clang
    - os: osx
      compiler: gcc
      osx_image: xcode9.2
      env: CXX=gcc
    - os: osx
      compiler: clang
      osx_image: xcode9.2
      env: CXX=clang
    - os: osx
      compiler: gcc
      osx_image: xcode8
      env: CXX=gcc
    - os: osx
      compiler: clang
      osx_image: xcode8
      env: CXX=clang
    - os: linux
      compiler: gcc-8
      env: CXX=gcc-8
    - os: linux
      compiler: gcc-7
      env: CXX=gcc-7
    - os: linux
      compiler: gcc-4.8
      env: CXX=gcc-4.8
    - os: linux
      compiler: clang
      env: CXX=clang
  allow_failures:
    - os: osx
      compiler: gcc
      osx_image: xcode9.4
      env: CXX=gcc
    - os: osx
      compiler: clang
      osx_image: xcode9.4
      env: CXX=clang
    - os: osx
      compiler: gcc
      osx_image: xcode8
      env: CXX=gcc
    - os: osx
      compiler: clang
      osx_image: xcode8
      env: CXX=clang
    - os: linux
      compiler: gcc-8
      env: CXX=gcc-8
    - os: linux
      compiler: gcc-7
      env: CXX=gcc-7
    - os: linux
      compiler: gcc-4.8
      env: CXX=gcc-4.8
    - os: linux
      compiler: clang
      env: CXX=clang
script: >
  if [ $TRAVIS_OS_NAME == osx ];
  then ./build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir bw-output make CC=$CXX ADDITIONAL_FLAGS="-DCI_TEST=1" tests;
  else ./build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output make CC=$CXX ADDITIONAL_FLAGS="-DCI_TEST=1" tests;
  fi;
  if [ $TRAVIS_OS_NAME == osx ];
  then make tests_full && ./run.sh ./libft_malloc.so.tests;
  else ./run.sh ./libft_malloc.so.tests;
  fi;
  r=$?;
  make coverage;
  return $r;
